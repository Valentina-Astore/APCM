* AES o Rijndael (continua)
** L'Algoritmo

Ricordiamo che l'algoritmo, una volta generate le round key, è costituito da questi passi fondamentali
--------------------- //Per ogni round:
Input:   State[4][4] ---\ le entrate della matrice
Output:  State[4][4] ---/ sono byte
---------------------
addRoundKey(0, state, roundKey)
for r=1,...,NR_ROUNDS-1
  subBytes(state)
  shiftRows(state)
  mixColumns(state)
  addRoundKey(r, state, roundKey)

subBytes(state)
shiftRows(state)
addRoundKey(NR_ROUNDS, state, roundKey)
---------------------


Dove:
a. subBytes è la SBox applicata ad ogni byte dello state.
b. shiftRows ruota la riga i-esima di i-1 posizioni a sinistra
e.g.

00 01 02 03         00 01 02 03         
10 11 12 13  ---\   11 12 13 10 
20 21 22 23  ---/   22 23 20 21
30 31 32 33         33 30 31 32 

Prima di descrivere ed implementare mixColumns, implementa il seguente

** Esercizio AES semplificato

Implementa il precedente algoritmo a meno di mixColumns
Ecco il main
[[./AESSimply.c][AES semplificato]]

Nota bene. Nello stato il plaintext si inserisce per colonna
1|5|09|13
2|6|10|14
3|7|11|15
4|8|12|16

** MixColumns

Anche in questo caso l'algoritmo presenta una soluzione elegante ed algebrica!


Consideriamo ogni colonna/word come un polinomio di grado 3 nell'anello
R=F[y]/(y^4+1)	// F rappresenta il campo F(2^8)

Dunque la colonna j sarà

b0j
b1j
b2j
b3j

Per semplicità eliminiamo l'indice j
Quindi

b(y) in R
sarà 

b(y)=b0+b1y+b2y^2+b3y^3

Se fissiamo un certo polinomio f(y)=a0+a1y+a2y^2+a3y^3
Allora f(y)*b(y)=d0+d1y+d2y^2+d3y^3
dove
d0=a0b0+a3b1+a2b2+a1b3
d1=a1b0+a0b1+a3b2+a2b3
d2=a2b0+a1b1+a0b2+a3b3
d3=a3b0+a2b1+a1b2+a0b3

Perchè?

Dunque
| d0 |   | a0 a3 a2 a1 |   | b0 |
| d1 | = | a1 a0 a3 a2 |   | b1 |
| d2 | = | a2 a1 a0 a3 |   | b2 |
| d3 |   | a3 a2 a1 a0 |   | b3 |


Dopo i necessari preliminari possiamo finalmente implementare MixColumns con i byte 
a0=0x2
a2=a1=0x1
a3=0x3
In questo caso formato decimale ed esadecimale coincidono!
Ricordiamo che i coefficienti "vivono" nel campo F=F256=F2[x]/(x^8+x^4+x^3+x+1)
Quindi 
a0=x
a2=a1=1
a3=x+1
Dunque dovrò ricondurre le moltiplicazioni tra coefficienti dei vettori riga per colonna come prodotti in F.

 
** Esercizio xtime
Implementare 
xtime(a)
che prende come input a, un byte rappresentante un elemento/polinomio in F=F2(x), e restituisce a*x.
E.g.
Lancia
./AESxtime 01
-->02 (01*x)
./AESxtime 02
-->04 (02*x)
./AESxtime 04
-->08 (04*x)
...
./AESxtime 80
(x^7*x)
-->1B (*)
Nota bene:
01=x^4
B==1011 =x^3+x+1
Infatti x^8=x^4+x^3+x+1	---> 1B


Hint:
Per la funzione xtime non è necessario usare "if"!
Bastano gli operatori <<, ^, >> e *
In particolare * ci permette di evitare l'if

** Esercizio moltiplicazioni in F
Usando xtime
implementa
multiplyF_256(a,b);
che permetta la moltiplicazione tra a e b in F.
E.g.
./AESMult256 02 80
(cioè x*x^7)
1B
./AESMult256 11 AA
(cioè ??,??)
E4


L'algoritmo è quello che abbiamo imparato alle elementari.
Facciamo un esempio

             1011x
             0101=
        ----------       
             1011  1
	    1011   0
	   1011    1
	  1011     0

             1011x
             0101=
        ----------       
             1011  1
	    0000   0
	   1011    1
	  0000     0
        ----------       
           100111

Ovviamente dobbiamo tener conto che stiamo shiftando di una posizione, modulo la relazione x^8=x^4+x^3+x+1,  cioè  stiamo usando xtime(a).

Quindi chiamando "a" il primo fattore e p=a*b, si ha che 
p=b0*a+b1*xtime(a)+...+b7*xtime(...(xtime(a))...)
                          \____________________/ 
                                 7 volte
Ovviamente la precedente espressione deve essere calcolata in modo iterativo ponendo ad ogni iterazione in p il prodotto parziale, e ponendo ad ogni iterazione 
a=xtime(a)

** Esercizio mixColumn
Ora hai tutti gli ingredienti per implementare mixColumn e quindi potrai verificare il risultato tramite 
[[./AESTest.c][AES Test]]

** ECB Vs CBC
Il precedente algoritmo implementa la modalità ECB
Electronic Code Book.
Questo metodo è estremamente insicuro. Infatti due blocchi uguali daranno sempre lo stesso blocco cifrato!

Guardiamo il diagramma
[[./ECB_encryption.svg][ECB]]
Per ovviare a questo problema, possiamo usare il CBC (cypher block chaining). Abbiamo però bisogno di un vettore iniziale iv
[[./CBC_encryption.svg][CBC]]

** Esercizio CBC
Implementa AES con CBC usando il test vector presente nel seguente file
[[./AESTestCBC.c][CBC]]

Nota Bene.
Nella mia implementazione 
encryptCBC(...)
usa
encryptAES(...)
che ho dal precedente esercizio
e 
CBC(...)
Quest'ultimo somma, al primo passo, il blocco di 16 byte da cifrare con iv. 
Nei successivi passi somma il buffer di 16 byte criptato al passo precedente. 
Ovviamente encryptCBC passerà i vaolri giusti di volta in volta.
Essenzialmente iv e buf sono entrambi vettori di byte. 

E' molto utile l'aritmetica dei puntatori nel passaggio di parametri a CBC.


